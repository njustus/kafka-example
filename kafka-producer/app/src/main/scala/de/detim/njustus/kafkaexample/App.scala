/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package de.detim.njustus.kafkaexample

import cats.effect._
import com.banno.kafka.BootstrapServers
import de.detim.njustus.kafkaexample.dtos.Editor
import fs2._

import java.nio.file.{Files, Path, Paths}
import java.time.Instant
import scala.jdk.CollectionConverters._
object App extends IOApp {
  import KafkaCirceSerializers._

  val servers = BootstrapServers("localhost:29092")
  val topic = "files"
  val snapshotTopic = "file-snapshots"

  def messages(path: Path):Stream[IO, dtos.Message] =
    Stream.eval(fileContent(path)) ++
    Stream(
      dtos.LineEdit(path.getFileName.toString, "nico-test-juni", dtos.Editor("nico"), 1, Instant.now()),
      dtos.LineEdit(path.getFileName.toString, "paul-test-mipa", dtos.Editor("sarah"), 2, Instant.now()),
      dtos.LineEdit(path.getFileName.toString, "paul-test-mipa", dtos.Editor("tim"), 4, Instant.now()),
      dtos.LineEdit(path.getFileName.toString, "test1234", dtos.Editor("tim"), 3, Instant.now()),
    )

  private def fileContent(path: Path) = IO.delay {
    val fileName = path.getFileName.toString
    val editor = dtos.Editor(Files.getOwner(path).getName)
    val timestamp = Files.getLastModifiedTime(path).toInstant
    val lines = Files.readAllLines(path).asScala.zipWithIndex.map { case (line, idx) =>
      dtos.LineEdit(fileName, line, editor, idx, timestamp)
    }

    dtos.FileContent(fileName,
      lines.toIndexedSeq,
      editor,
      Instant.now())
  }

  override def run(args: List[String]): IO[ExitCode] = for {
    _ <- IO.println("starting producer...")
    _ <- stream.compile.drain
//    _ <- stream2.compile.drain
  } yield ExitCode.Success

  def stream2 = {
    KafkaConsumer.createConsumer[dtos.Message](servers, "scala-test-client", topic)
      .evalMap(x => IO.println(s"received msg $x"))
  }

  def stream = {
    KafkaProducer.createProducer[dtos.Message](servers, topic).flatMap { producer =>
      messages(Paths.get("test-file.txt")).evalMap(producer.sendAsync)
    }
  }
}
